{"ast":null,"code":"import REPO_ACTIONS from './repo.actionTypes';\nimport { fetchUserRepo } from '../../utils/api';\nimport Repo from '../../models/repo';\nvar initialState = {\n  user: '',\n  repo: [],\n  count: 0\n};\n\nvar RepoReducer = function RepoReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n\n  var _ref = arguments.length > 1 ? arguments[1] : undefined,\n      type = _ref.type,\n      payload = _ref.payload;\n\n  switch (type) {\n    case REPO_ACTIONS.FETCH_REPO_DATA:\n      var repoData = fetchUserRepo(payload);\n      console.log(repoData);\n      return {\n        state\n      };\n\n    case REPO_ACTIONS.FETCH_REPO_SUCCESS:\n      var newuser = payload.user;\n      var count = payload.data.length;\n      var repos = mapJsonToRepo(payload);\n      console.log('sucess', count);\n      return state;\n\n    default:\n      return state;\n  }\n};\n\nexport default RepoReducer;\n\nfunction mapJsonToRepo(payload) {\n  var repos = payload.data.map(function (o) {\n    return new Repo(o.name, o.owner.login, o.description, o.default_branch);\n  });\n  return repos;\n}","map":{"version":3,"sources":["/Users/rukmoni/React/codesandbox/github-readme-viewer/src/store/repo/repo.reducer.js"],"names":["REPO_ACTIONS","fetchUserRepo","Repo","initialState","user","repo","count","RepoReducer","state","type","payload","FETCH_REPO_DATA","repoData","console","log","FETCH_REPO_SUCCESS","newuser","data","length","repos","mapJsonToRepo","map","o","name","owner","login","description","default_branch"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,oBAAzB;AACA,SAAQC,aAAR,QAA4B,iBAA5B;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,IAAMC,YAAY,GAAC;AACfC,EAAAA,IAAI,EAAC,EADU;AAEfC,EAAAA,IAAI,EAAC,EAFU;AAGfC,EAAAA,KAAK,EAAC;AAHS,CAAnB;;AAKC,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAyC;AAAA,MAAxCC,KAAwC,uEAAlCL,YAAkC;;AAAA;AAAA,MAAnBM,IAAmB,QAAnBA,IAAmB;AAAA,MAAbC,OAAa,QAAbA,OAAa;;AAC1D,UAAQD,IAAR;AACI,SAAKT,YAAY,CAACW,eAAlB;AAEI,UAAIC,QAAQ,GAACX,aAAa,CAACS,OAAD,CAA1B;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,aAAO;AACHJ,QAAAA;AADG,OAAP;;AAGJ,SAAKR,YAAY,CAACe,kBAAlB;AAEI,UAAIC,OAAO,GAACN,OAAO,CAACN,IAApB;AACA,UAAIE,KAAK,GAACI,OAAO,CAACO,IAAR,CAAaC,MAAvB;AACA,UAAIC,KAAK,GAACC,aAAa,CAACV,OAAD,CAAvB;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBR,KAAtB;AACA,aAAOE,KAAP;;AACJ;AACI,aAAOA,KAAP;AAhBR;AAkBH,CAnBA;;AAqBD,eAAeD,WAAf;;AAEA,SAASa,aAAT,CAAuBV,OAAvB,EAA+B;AAC3B,MAAIS,KAAK,GAAGT,OAAO,CAACO,IAAR,CAAaI,GAAb,CACR,UAAAC,CAAC;AAAA,WAAI,IAAIpB,IAAJ,CAASoB,CAAC,CAACC,IAAX,EAAiBD,CAAC,CAACE,KAAF,CAAQC,KAAzB,EAAgCH,CAAC,CAACI,WAAlC,EAA+CJ,CAAC,CAACK,cAAjD,CAAJ;AAAA,GADO,CAAZ;AAGE,SAAOR,KAAP;AACL","sourcesContent":["import REPO_ACTIONS from './repo.actionTypes';\nimport {fetchUserRepo} from '../../utils/api';\nimport Repo from '../../models/repo';\nconst initialState={\n    user:'',\n    repo:[],\n    count:0\n}\n const RepoReducer = (state=initialState, {type, payload}) => {\n    switch (type) {\n        case REPO_ACTIONS.FETCH_REPO_DATA:\n           \n            let repoData=fetchUserRepo(payload)\n            console.log(repoData)\n            return {\n                state\n            }\n        case REPO_ACTIONS.FETCH_REPO_SUCCESS:\n          \n            let newuser=payload.user;\n            let count=payload.data.length;\n            let repos=mapJsonToRepo(payload);\n            console.log('sucess', count);\n            return state;\n        default:\n            return state\n    }\n}\n\nexport default RepoReducer;\n\nfunction mapJsonToRepo(payload){\n    var repos = payload.data.map(\n        o => new Repo(o.name, o.owner.login, o.description, o.default_branch)\n      );\n      return repos;\n}"]},"metadata":{},"sourceType":"module"}