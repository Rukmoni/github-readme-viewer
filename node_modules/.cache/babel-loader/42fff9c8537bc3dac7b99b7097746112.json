{"ast":null,"code":"/* export async function fetchUserRepo(name) {\n  let response = await fetch(`https://api.github.com/users/${name}/repos`);\n  let data = await response.json();\n  // dispatch(getUser('data'));\n  //let repos = getRepos(data.repos_url);\n\n  return data;\n} */\n\n/* export async function getRepos(url) {\n  let response = await fetch(url);\n  let data = await response.json();\n  return data;\n} */\n//updated repo action\nimport axios from 'axios';\nimport REPO_ACTIONS from '../store/repo/repo.actionTypes';\nimport { fetchRepos, fetchRepoSucess, fetchRepoFailure } from '../store/repo/repo.action';\nexport function loadReposSuccess(repos) {\n  return {\n    type: REPO_ACTIONS.LOAD_REPOS_SUCCESS,\n    repos\n  };\n}\n/* export async function fetchUserRepo(user) {\n  let response = await fetch(`https://api.github.com/users/${user}/repos`);\n  let data = await response.json();\n  //console.log('data',data)\n  return data;\n} */\n//import {fetchProductsPending, fetchProductsSuccess, fetchProductsError} from 'actions';\n\nexport function fetchUserRepo(user) {\n  //return dispatch => {\n  //  dispatch(fetchProductsPending());\n  fetch(\"https://api.github.com/users/\".concat(user, \"/repos\")).then(function (res) {\n    return res.json();\n  }).then(function (res) {\n    if (res.error) {\n      throw res.error;\n    }\n\n    dispatch(fetchRepoSucess(res.products));\n    return res.products;\n  }).catch(function (error) {\n    dispatch(fetchRepoFailure(error));\n  }); // }\n}","map":{"version":3,"sources":["/Users/rukmoni/React/codesandbox/github-readme-viewer/src/controllers/api.js"],"names":["axios","REPO_ACTIONS","fetchRepos","fetchRepoSucess","fetchRepoFailure","loadReposSuccess","repos","type","LOAD_REPOS_SUCCESS","fetchUserRepo","user","fetch","then","res","json","error","dispatch","products","catch"],"mappings":"AAAA;;;;;;;;;AAQA;;;;;AAMA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,SAAQC,UAAR,EAAmBC,eAAnB,EAAmCC,gBAAnC,QAA0D,2BAA1D;AACA,OAAO,SAASC,gBAAT,CAA0BC,KAA1B,EAAiC;AACpC,SAAO;AACHC,IAAAA,IAAI,EAAEN,YAAY,CAACO,kBADhB;AAEHF,IAAAA;AAFG,GAAP;AAIH;AAED;;;;;;AAOA;;AAGA,OAAO,SAASG,aAAT,CAAuBC,IAAvB,EAA6B;AAChC;AACE;AACEC,EAAAA,KAAK,wCAAiCD,IAAjC,YAAL,CACCE,IADD,CACM,UAAAC,GAAG;AAAA,WAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,GADT,EAECF,IAFD,CAEM,UAAAC,GAAG,EAAI;AACT,QAAGA,GAAG,CAACE,KAAP,EAAc;AACV,YAAMF,GAAG,CAACE,KAAV;AACH;;AACDC,IAAAA,QAAQ,CAACb,eAAe,CAACU,GAAG,CAACI,QAAL,CAAhB,CAAR;AACA,WAAOJ,GAAG,CAACI,QAAX;AACH,GARD,EASCC,KATD,CASO,UAAAH,KAAK,EAAI;AACZC,IAAAA,QAAQ,CAACZ,gBAAgB,CAACW,KAAD,CAAjB,CAAR;AACH,GAXD,EAH4B,CAejC;AACF","sourcesContent":["/* export async function fetchUserRepo(name) {\n  let response = await fetch(`https://api.github.com/users/${name}/repos`);\n  let data = await response.json();\n  // dispatch(getUser('data'));\n  //let repos = getRepos(data.repos_url);\n\n  return data;\n} */\n/* export async function getRepos(url) {\n  let response = await fetch(url);\n  let data = await response.json();\n  return data;\n} */\n\n//updated repo action\nimport axios from 'axios';\nimport REPO_ACTIONS from '../store/repo/repo.actionTypes';\nimport {fetchRepos,fetchRepoSucess,fetchRepoFailure} from '../store/repo/repo.action';\nexport function loadReposSuccess(repos) {\n    return {\n        type: REPO_ACTIONS.LOAD_REPOS_SUCCESS,\n        repos\n    };\n}\n\n/* export async function fetchUserRepo(user) {\n  let response = await fetch(`https://api.github.com/users/${user}/repos`);\n  let data = await response.json();\n  //console.log('data',data)\n  return data;\n} */\n\n//import {fetchProductsPending, fetchProductsSuccess, fetchProductsError} from 'actions';\n\n\nexport function fetchUserRepo(user) {\n    //return dispatch => {\n      //  dispatch(fetchProductsPending());\n        fetch(`https://api.github.com/users/${user}/repos`)\n        .then(res => res.json())\n        .then(res => {\n            if(res.error) {\n                throw(res.error);\n            }\n            dispatch(fetchRepoSucess(res.products));\n            return res.products;\n        })\n        .catch(error => {\n            dispatch(fetchRepoFailure(error));\n        })\n   // }\n}\n\n"]},"metadata":{},"sourceType":"module"}