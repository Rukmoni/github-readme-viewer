{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rukmoni/React/codesandbox/github-readme-viewer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/rukmoni/React/codesandbox/github-readme-viewer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/* export async function fetchUserRepo(name) {\n  let response = await fetch(`https://api.github.com/users/${name}/repos`);\n  let data = await response.json();\n  // dispatch(getUser('data'));\n  //let repos = getRepos(data.repos_url);\n\n  return data;\n} */\n\n/* export async function getRepos(url) {\n  let response = await fetch(url);\n  let data = await response.json();\n  return data;\n} */\n//updated repo action\nimport axios from 'axios';\nimport REPO_ACTIONS from '../store/repo/repo.actionTypes';\nexport function loadReposSuccess(repos) {\n  return {\n    type: REPO_ACTIONS.LOAD_REPOS_SUCCESS,\n    repos\n  };\n}\nexport function fetchUserRepo(_x) {\n  return _fetchUserRepo.apply(this, arguments);\n}\n\nfunction _fetchUserRepo() {\n  _fetchUserRepo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(user) {\n    var response, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(\"https://api.github.com/users/\".concat(user, \"/repos\"));\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return response.json();\n\n          case 5:\n            data = _context.sent;\n            return _context.abrupt(\"return\", data);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _fetchUserRepo.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/rukmoni/React/codesandbox/github-readme-viewer/src/controllers/api.js"],"names":["axios","REPO_ACTIONS","loadReposSuccess","repos","type","LOAD_REPOS_SUCCESS","fetchUserRepo","user","fetch","response","json","data"],"mappings":";;;AAAA;;;;;;;;;AAQA;;;;;AAMA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AAEA,OAAO,SAASC,gBAAT,CAA0BC,KAA1B,EAAiC;AACpC,SAAO;AACHC,IAAAA,IAAI,EAAEH,YAAY,CAACI,kBADhB;AAEHF,IAAAA;AAFG,GAAP;AAIH;AAED,gBAAsBG,aAAtB;AAAA;AAAA;;;4EAAO,iBAA6BC,IAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACgBC,KAAK,wCAAiCD,IAAjC,YADrB;;AAAA;AACDE,YAAAA,QADC;AAAA;AAAA,mBAEYA,QAAQ,CAACC,IAAT,EAFZ;;AAAA;AAEDC,YAAAA,IAFC;AAAA,6CAIEA,IAJF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["/* export async function fetchUserRepo(name) {\n  let response = await fetch(`https://api.github.com/users/${name}/repos`);\n  let data = await response.json();\n  // dispatch(getUser('data'));\n  //let repos = getRepos(data.repos_url);\n\n  return data;\n} */\n/* export async function getRepos(url) {\n  let response = await fetch(url);\n  let data = await response.json();\n  return data;\n} */\n\n//updated repo action\nimport axios from 'axios';\nimport REPO_ACTIONS from '../store/repo/repo.actionTypes';\n\nexport function loadReposSuccess(repos) {\n    return {\n        type: REPO_ACTIONS.LOAD_REPOS_SUCCESS,\n        repos\n    };\n}\n\nexport async function fetchUserRepo(user) {\n  let response = await fetch(`https://api.github.com/users/${user}/repos`);\n  let data = await response.json();\n  //console.log('data',data)\n  return data;\n}"]},"metadata":{},"sourceType":"module"}