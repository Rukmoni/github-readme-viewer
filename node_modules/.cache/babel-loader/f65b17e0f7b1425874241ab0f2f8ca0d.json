{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rukmoni/React/codesandbox/github-readme-viewer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/rukmoni/React/codesandbox/github-readme-viewer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nimport REPO_ACTIONS from '../store/repo/repo.actionTypes';\nimport { fetchRepos, fetchRepoSucess, fetchRepoFailure } from '../store/repo/repo.action';\nexport function fetchUserRepo(_x) {\n  return _fetchUserRepo.apply(this, arguments);\n}\n\nfunction _fetchUserRepo() {\n  _fetchUserRepo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(name) {\n    var response, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(\"https://api.github.com/users/\".concat(name, \"/repos\"));\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return response.json();\n\n          case 5:\n            data = _context.sent;\n            console.log(data);\n            loadReposSuccess(data); // dispatch(getUser('data'));\n            //let repos = getRepos(data.repos_url);\n\n            return _context.abrupt(\"return\", data);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _fetchUserRepo.apply(this, arguments);\n}\n\nexport function fetchUserRepoTest(_x2) {\n  return _fetchUserRepoTest.apply(this, arguments);\n}\n/* export async function getRepos(url) {\n  let response = await fetch(url);\n  let data = await response.json();\n  return data;\n} */\n//updated repo action\n\nfunction _fetchUserRepoTest() {\n  _fetchUserRepoTest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(user) {\n    var resp;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return fetch(\"https://api.github.com/users/\".concat(user, \"/repos\"));\n\n          case 3:\n            resp = _context2.sent;\n            console.log(resp.response);\n            return _context2.abrupt(\"return\", resp);\n\n          case 8:\n            _context2.prev = 8;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log(_context2.t0);\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 8]]);\n  }));\n  return _fetchUserRepoTest.apply(this, arguments);\n}\n\nexport function loadReposSuccess(repos) {\n  return {\n    type: REPO_ACTIONS.FETCH_REPO_SUCCESS,\n    repos\n  };\n}\n/* export function fetchUserRepo(user) {\n  return function(dispatch) {\n      return axios\n          .get(`https://api.github.com/users/${user}/repos`)\n          .then(repos => {\n            console.log(\"receiving following data: \"+repos.data);\n              dispatch(loadReposSuccess(repos.data));\n             \n          })\n          .catch(err => {\n              throw err;\n          });\n  };\n} */\n\n/* export async function fetchUserRepo(user) {\n  let response = await fetch(`https://api.github.com/users/${user}/repos`);\n  let data = await response.json();\n  //console.log('data',data)\n  return data;\n} */\n//import {fetchProductsPending, fetchProductsSuccess, fetchProductsError} from 'actions';\n\n/* export function fetchUserRepo(user) {\n    return dispatch => {\n      //  dispatch(fetchProductsPending());\n        fetch(`https://api.github.com/users/${user}/repos`)\n        .then(res => res.json())\n        .then(res => {\n            if(res.error) {\n                throw(res.error);\n            }\n            dispatch(fetchRepoSucess(res.products));\n            return res.products;\n        })\n        .catch(error => {\n            dispatch(fetchRepoFailure(error));\n        })\n    }\n} */","map":{"version":3,"sources":["/Users/rukmoni/React/codesandbox/github-readme-viewer/src/controllers/api.js"],"names":["axios","REPO_ACTIONS","fetchRepos","fetchRepoSucess","fetchRepoFailure","fetchUserRepo","name","fetch","response","json","data","console","log","loadReposSuccess","fetchUserRepoTest","user","resp","repos","type","FETCH_REPO_SUCCESS"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,SAAQC,UAAR,EAAmBC,eAAnB,EAAmCC,gBAAnC,QAA0D,2BAA1D;AACE,gBAAsBC,aAAtB;AAAA;AAAA;;;4EAAO,iBAA6BC,IAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACcC,KAAK,wCAAiCD,IAAjC,YADnB;;AAAA;AACHE,YAAAA,QADG;AAAA;AAAA,mBAEUA,QAAQ,CAACC,IAAT,EAFV;;AAAA;AAEHC,YAAAA,IAFG;AAGPC,YAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAG,YAAAA,gBAAgB,CAACH,IAAD,CAAhB,CAJO,CAKP;AACA;;AANO,6CAQAA,IARA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAWT,gBAAsBI,iBAAtB;AAAA;AAAA;AAUA;;;;;AAMA;;;gFAhBO,kBAAkCC,IAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEgBR,KAAK,wCAAiCQ,IAAjC,YAFrB;;AAAA;AAEGC,YAAAA,IAFH;AAGHL,YAAAA,OAAO,CAACC,GAAR,CAAYI,IAAI,CAACR,QAAjB;AAHG,8CAIIQ,IAJJ;;AAAA;AAAA;AAAA;AAMAL,YAAAA,OAAO,CAACC,GAAR;;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAkBP,OAAO,SAASC,gBAAT,CAA0BI,KAA1B,EAAiC;AACpC,SAAO;AACHC,IAAAA,IAAI,EAAEjB,YAAY,CAACkB,kBADhB;AAEHF,IAAAA;AAFG,GAAP;AAIH;AAED;;;;;;;;;;;;;;;AAcA;;;;;;AAOA;;AAGA","sourcesContent":["import axios from 'axios';\nimport REPO_ACTIONS from '../store/repo/repo.actionTypes';\nimport {fetchRepos,fetchRepoSucess,fetchRepoFailure} from '../store/repo/repo.action';\n  export async function fetchUserRepo(name) {\n  let response = await fetch(`https://api.github.com/users/${name}/repos`);\n  let data = await response.json();\n  console.log(data);\n  loadReposSuccess(data);\n  // dispatch(getUser('data'));\n  //let repos = getRepos(data.repos_url);\n\n  return data;\n} \n\nexport async function fetchUserRepoTest (user) {\n  try {\n    const resp = await fetch(`https://api.github.com/users/${user}/repos`)\n    console.log(resp.response)\n    return resp\n  } catch (err) {\n       console.log(err)\n    }\n}\n\n/* export async function getRepos(url) {\n  let response = await fetch(url);\n  let data = await response.json();\n  return data;\n} */\n\n//updated repo action\n\nexport function loadReposSuccess(repos) {\n    return {\n        type: REPO_ACTIONS.FETCH_REPO_SUCCESS,\n        repos\n    };\n}\n\n/* export function fetchUserRepo(user) {\n  return function(dispatch) {\n      return axios\n          .get(`https://api.github.com/users/${user}/repos`)\n          .then(repos => {\n            console.log(\"receiving following data: \"+repos.data);\n              dispatch(loadReposSuccess(repos.data));\n             \n          })\n          .catch(err => {\n              throw err;\n          });\n  };\n} */\n/* export async function fetchUserRepo(user) {\n  let response = await fetch(`https://api.github.com/users/${user}/repos`);\n  let data = await response.json();\n  //console.log('data',data)\n  return data;\n} */\n\n//import {fetchProductsPending, fetchProductsSuccess, fetchProductsError} from 'actions';\n\n\n/* export function fetchUserRepo(user) {\n    return dispatch => {\n      //  dispatch(fetchProductsPending());\n        fetch(`https://api.github.com/users/${user}/repos`)\n        .then(res => res.json())\n        .then(res => {\n            if(res.error) {\n                throw(res.error);\n            }\n            dispatch(fetchRepoSucess(res.products));\n            return res.products;\n        })\n        .catch(error => {\n            dispatch(fetchRepoFailure(error));\n        })\n    }\n} */\n\n"]},"metadata":{},"sourceType":"module"}